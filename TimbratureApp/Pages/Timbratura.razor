@page "/timbratura"
@using System.Timers
@using TimbratureApp.Service
@inject IJSRuntime JSRuntime
@inject TimbratureService TimbratureService
@inject NavigationManager navigationManager;

<div style="font-family: 'Franklin Gothic'" class="container my-5">
    <h1 class="display-4 text-center mb-4">Timbrature</h1>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg rounded-3">
                <div class="card-body p-4">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <td class="info-label">Data e Ora:</td>
                                <td class="info-value"><span id="orologio">@OraCorrente</span></td>
                                
                            </tr>
                            @if (_coordinates != null)
                            {
                                <tr>
                                    <td class="info-label">Coordinate:</td>
                                    <td class="info-value">
                                        Latitudine: @_coordinates.Latitude / Longitudine: @_coordinates.Longitude
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (_error != null)
                    {
                        <div class="alert alert-danger text-center" role="alert">
                            Error: @_error
                        </div>
                    }
                    else if (_coordinates == null)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }

                    <button class="btn btn-primary d-block mx-auto mt-3" @onclick="Timbra">Timbra</button>
                    <br />
                    @if (MostraMessaggioSuccesso)
                    {
                        <p style="text-align:center;color:green">@messaggioSuccesso</p>
                    }
                    <br />
                    <NavLink class="btn btn-warning d-block mx-auto" href="/customtimbratura">Vai alla scelta dell'orario</NavLink>
                    <br />
                    <NavLink class="btn btn-danger d-block mx-auto" href="/timbratureavvenute">Vai alle timbrature avvenute</NavLink>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private GeolocationCoordinates? _coordinates;
    private string? _error;
    private Timer? _timer;
    private string OraCorrente = DateTime.Now.ToString("HH:mm:ss");
    private DateTime DataOraSelezionata = DateTime.Now;
    public string messaggioSuccesso = "";
    private bool MostraMessaggioSuccesso = false;
    private Timer? _timerMessaggio;



    private void ImpostaOra()
    {
        OraCorrente = DataOraSelezionata.ToString("HH:mm:ss");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _coordinates = await JSRuntime.InvokeAsync<GeolocationCoordinates>(
                "eval",
                    @"(function() {
                    return new Promise((resolve, reject) => {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(
                                (position) => {
                                    resolve({
                                        latitude: position.coords.latitude,
                                        longitude: position.coords.longitude,
                                    });
                                },
                                (error) => {
                                    reject(error.message);
                                }
                            );
                        } else {
                            reject('Geolocation is not supported by this browser.');
                        }
                    });
                })()"
            );

            await AvviaOrologio();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task AvviaOrologio()
    {
        // Inizializza il timer
        _timer = new Timer(1000);
        _timer.Elapsed += (sender, e) =>
        {
            OraCorrente = DateTime.Now.ToString("HH:mm:ss");
            InvokeAsync(StateHasChanged);
        };

        // Avvia il timer solo se siamo nella pagina Timbratura
        if (navigationManager.Uri.EndsWith("/timbratura"))
        {
            _timer.Start();
        }
    }

    private async Task Timbra()
    {
        if (_coordinates != null)
        {
            TimbratureService.Timbrature.Add(new TimbraturaPersona
                {
                    DataOra = DateTime.Now,
                    Latitudine = _coordinates.Latitude,
                    Longitudine = _coordinates.Longitude,
                    IdUtente = 1 // Sostituisci con il tuo metodo per ottenere l'ID utente
                });

            messaggioSuccesso = "Timbratura salvata con successo!";
            MostraMessaggioSuccesso = true; // Mostra il messaggio

            // Imposta il timer per nascondere il messaggio dopo 1 secondo
            _timerMessaggio = new Timer(2000);
            _timerMessaggio.Elapsed += (sender, e) =>
            {
                MostraMessaggioSuccesso = false; // Nascondi il messaggio
                InvokeAsync(StateHasChanged); // Aggiorna l'interfaccia utente
                _timerMessaggio.Dispose(); // Smaltisci il timer
            };
            _timerMessaggio.Start();

            StateHasChanged();

        }
        else
        {
            _error = "Coordinate non disponibili";
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && navigationManager.Uri.EndsWith("/timbratura"))
        {
            await AvviaOrologio();
        }
    }


    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}