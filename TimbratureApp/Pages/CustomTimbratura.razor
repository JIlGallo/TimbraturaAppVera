@page "/customtimbratura"
@using System.Timers
@using Blazored.LocalStorage
@using TimbratureApp.Service
@using it.Mifram.Dieci3k.DTO.Anagrafiche
@using it.Mifram.Dieci3k.DTO.Presenze
@inject IJSRuntime JSRuntime
@inject Dieci3kRestService dieci3KRestService
@inject NavigationManager navigationManager;
@inject ILocalStorageService localStorage


<div style="font-family: 'Franklin Gothic'"  class="container my-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow-lg rounded-3">
                    <div class="card-body p-4">
                        <h1 class="display-4 text-center mb-4">Timbratura</h1>

                        <div class="form-group mb-3">
                            <h5><label for="datetime-picker" class="form-label">Scegli data e ora:</label></h5>
                            <input type="datetime-local" id="datetime-picker" class="form-control" @bind="DataOraSelezionata" />
                        </div>

                        @if (_coordinates != null)
                        {
                            <div class="mb-3">
                            <h5><label class="form-label">Coordinate:</label></h5>
                                <p class="form-control-plaintext">
                                    Latitudine: @_coordinates.Latitude / Longitudine: @_coordinates.Longitude
                                </p>
                            </div>
                        }


                        <div class="mb-3">
                            <h5><label for="Note" class="form-label">Note:</label></h5>
                            <textarea id="Note" class="form-control" @bind="note" placeholder="Inserisci una nota" rows="1"></textarea>
                        </div>

                        @if (_error != null)
                        {
                            <div class="alert alert-danger text-center" role="alert">
                                Error: @_error
                            </div>
                        }
                        else if (_coordinates == null)
                        {
                            <div class="d-flex justify-content-center mb-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }

                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="Timbra">Timbra</button>
                            <NavLink class="btn btn-danger" href="/timbratureavvenute">Vai alle timbrature avvenute</NavLink>
                        </div>


                        @if (MostraMessaggioSuccesso)
                        {
                            <div class="alert alert-success text-center mt-3" role="alert">
                                @messaggioSuccesso
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
@code {
    private GeolocationCoordinates? _coordinates;
    private string? _error;
    private Timer? _timer;
    private DateTime DataOraSelezionata = DateTime.Now;
    public string messaggioSuccesso = "";
    private bool MostraMessaggioSuccesso = false;
    public string messaggioErrore = "";
    private bool MostraMessaggioErrore = false;
    private Timer? _timerMessaggio;
    private int dipId { get; set; }
    private string origine { get; set; } = "";
    private string note { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _coordinates = await JSRuntime.InvokeAsync<GeolocationCoordinates>(
                "eval",
                        @"(function() {
                    return new Promise((resolve, reject) => {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(
                                (position) => {
                                    resolve({
                                        latitude: position.coords.latitude,
                                        longitude: position.coords.longitude,
                                    });
                                },
                                (error) => {
                                    reject(error.message);
                                }
                            );
                        } else {
                            reject('Geolocation is not supported by this browser.');
                        }
                    });
                })()"
            );
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    public async Task Timbra()
    {
        try
        {
            string token = await localStorage.GetItemAsync<string>("TokenString");

            int utenteId = await localStorage.GetItemAsync<int>("IdDip");

            if (string.IsNullOrEmpty(token))
            {
                navigationManager.NavigateTo("/");
                return; // Important: Exit the method after redirecting
            }

            int result = await dieci3KRestService.FaiTimbratura(token, new TimbraturaDTO
                {
                    DipendenteId = utenteId,
                    Latitudine = _coordinates.Latitude.ToString(),
                    Longitudine = _coordinates.Longitude.ToString(),
                    DataTimbratura = DataOraSelezionata,
                    Source = origine,
                    Note = note
                });
                Console.WriteLine(result);
            if (result >= 0)
            {
                List<TimbraturaDTO> timbratureList = await localStorage.GetItemAsync<List<TimbraturaDTO>>("TimbratureList") ?? new List<TimbraturaDTO>();
                timbratureList.Add(new TimbraturaDTO
                    {
                        DipendenteId = utenteId,
                        Latitudine = _coordinates.Latitude.ToString(),
                        Longitudine = _coordinates.Longitude.ToString(),
                        DataTimbratura = DataOraSelezionata,
                        Source = origine,
                        Note = note
                    });
                await localStorage.SetItemAsync("TimbratureList", timbratureList);

                messaggioSuccesso = "Timbratura salvata con successo!";
                MostraMessaggioSuccesso = true;

                _timerMessaggio = new Timer(2000);
                _timerMessaggio.Elapsed += (sender, e) =>
                {
                    MostraMessaggioSuccesso = false;
                    InvokeAsync(StateHasChanged);
                    _timerMessaggio.Dispose();
                };
                _timerMessaggio.Start();
            }
            else
            {
                // More specific error handling based on result (if available)
                messaggioErrore = "Errore durante la timbratura.";
                MostraMessaggioErrore = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in Timbra method: " + ex.Message);

            if (ex is HttpRequestException ||
                ex.Message.Contains("401") || // Unauthorized
                ex.Message.Contains("403"))   // Forbidden
            {
                messaggioErrore = "Sessione scaduta. Effettua nuovamente il login.";
                MostraMessaggioErrore = true;
            }
            else
            {
                messaggioErrore = "Errore durante la timbratura. Riprova più tardi.";
                MostraMessaggioErrore = true;
            }
        }

        StateHasChanged();
    }
  
    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}